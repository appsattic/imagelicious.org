{
  "rules": {
    "user": {
      "$uid": {
        ".read": "auth.uid === $uid",
        "$imgId" : {
          ".write" : "auth.uid === $uid && !data.exists()",
          ".validate": "newData.hasChildren(['filename', 'size', 'contentType', 'downloadUrl', 'inserted'])",
          "filename": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          "size": {
            ".validate": "newData.isNumber() && newData.val() > 0"
          },
          "contentType": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          "downloadUrl": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          "inserted": {
            ".validate": "newData.val() <= now && newData.val() >= now - 15 * 1000"
          },
          "$other": {
            ".validate": false
          }
        }
      }
    },
    "img": {
      // Don't put a ".read" here, since we don't want someone to download everything from img/` down, but just
      // individual images if they know a valid `$imgId`.
      "$imgId": {
        ".read": true,
        ".write": "!data.exists()",
        ".validate": "newData.hasChildren(['uid', 'inserted'])",
        "uid": {
          ".validate": "newData.isString() && newData.val() === auth.uid"
        },
        "inserted": {
            ".validate": "newData.val() <= now && newData.val() >= now - 15 * 1000"
        },
        "$other": {
          ".validate": false
        }
      }
    }
  }
}
